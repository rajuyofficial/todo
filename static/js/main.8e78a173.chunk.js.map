{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","name","placeholder","onChange","ref","Todo","completeTodo","todos","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e78a173.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    })\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 1000),\r\n            text: input\r\n        });\r\n        setInput('');\r\n    }\r\n\r\n    return (\r\n\r\n        <form className='todo-form' onSubmit={handleSubmit} >\r\n            {props.edit ? (\r\n                <>\r\n                    <input type=\"text\"\r\n                        name=\"text\"\r\n                        placeholder=\"Update  your item\"\r\n                        value={input}\r\n                        className=\"todo-input edit\"\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n\r\n                    />\r\n                    <button type=\"submit\" className=\"todo-button edit\">update</button>\r\n\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <input type=\"text\"\r\n                        name=\"text\"\r\n                        placeholder=\"Add a todo\"\r\n                        value={input}\r\n                        className=\"todo-input\"\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n\r\n                    />\r\n                    <button type=\"submit\" className=\"todo-button\">Add todo</button>\r\n\r\n                </>\r\n            )}\r\n        </form>\r\n    )\r\n}\r\nexport default TodoForm\r\n","import React, { useState } from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport { RiCloseCircleLine } from 'react-icons/ri'\r\nimport { TiEdit } from 'react-icons/ti'\r\n\r\nfunction Todo({ completeTodo, todos, removeTodo, updateTodo }) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        });\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {todos?.map((todo, index) =>\r\n                <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>\r\n                    <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                        {todo.text}\r\n                    </div>\r\n                    <div className=\"icons\">\r\n                        <RiCloseCircleLine\r\n                            onClick={() => removeTodo(todo.id)}\r\n                            className='delete-icon'\r\n                        />\r\n                        <TiEdit\r\n                            onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                            className='edit-icon'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n        </>)\r\n\r\n}\r\n\r\nexport default Todo\r\n","import React, { useState } from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = (todo) => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n        setTodos(newTodos);\r\n        console.log({ todos });\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id === todoId) ? newValue : item));\r\n    }\r\n\r\n    const removeTodo = (id) => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n        setTodos(removeArr);\r\n    }\r\n\r\n\r\n\r\n\r\n    const completeTodo = (id) => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id == id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        })\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>what a place for today</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo\r\n                todos={todos}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","\nimport TodoList from './components/TodoList'\nimport Todo from './components/Todo'\nimport './App.css'\nimport TodoForm from './components/TodoForm'\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n        <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}